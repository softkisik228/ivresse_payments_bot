import logging
import datetime
import os
import pandas as pd
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv
from aiogram.utils.exceptions import ChatNotFound

load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
TOKEN = os.getenv("TOKEN")
ADMIN_IDS = {1331149682, 5303672650} # –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤ –≤ –≤–∏–¥–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ {123456789, 987654321}
NOTIFICATION_CHAT_ID = os.getenv("NOTIFICATION_CHAT_ID")

event_date = "5 –∞–ø—Ä–µ–ª—è"
event_price = 2300  # –£—Å—Ç–∞–Ω–æ–≤–∏ —Å–≤–æ—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞
# –ö–æ–Ω—Ñ–∏–≥ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

db_file = "tickets.xlsx"

bot = Bot(token=TOKEN, timeout=30)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())

accept_message = message = f"""
üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! üéâ

üìç –ñ–¥—ë–º —Ç–µ–±—è 5 –∞–ø—Ä–µ–ª—è —Å 19:00 –ø–æ –∞–¥—Ä–µ—Å—É:  
–û–ª—å—Ö–æ–≤—Å–∫–∞—è —É–ª. 14—Å5 üè†üî•

üîπ –ß—Ç–æ –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π?  
   - üìå –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏–π –±–∏–ª–µ—Ç ‚Äì –¥–ª—è –≤—Ö–æ–¥–∞  
   - üìå –ü–∞—Å–ø–æ—Ä—Ç ‚Äì –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π  
   - üìå –û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äì –±–µ–∑ –Ω–µ–≥–æ –Ω–µ –ø—É—Å—Ç–∏–º! üòâüéä  

üíÉ –ë—É–¥–µ—Ç –º–Ω–æ–≥–æ –º—É–∑—ã–∫–∏, –¥—Ä–∞–π–≤–∞ –∏ –∫—Ä—É—Ç—ã—Ö –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–π!  
üöÄ –ì–æ—Ç–æ–≤—å—Å—è –∫ —Å–∞–º–æ–π –∂–∞—Ä–∫–æ–π —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π —Ç—É—Å–æ–≤–∫–µ! üî•  
"""


promo_codes = {
    "PROMO10": 10,
    "PROMO20": 20,
    "PROMO30": 30
}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class TicketOrder(StatesGroup):
    full_name = State()
    university = State()
    promo_code = State()
    confirm = State()
    age_confirmation = State() 

class AdminSetEvent(StatesGroup):
    date = State()
    price = State()
    confirmation = State()
    cancel_confirmation = State()
    deny_payment = State()
    cancel = State()

class AdminAddClient(StatesGroup):
    full_name = State()
    university = State()
    telegram_username = State()
    amount_paid = State()
    cancel = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
main_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç"))
admin_menu = ReplyKeyboardMarkup(resize_keyboard=True).add(
    KeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"),
    KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É"),
    KeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑"),
    KeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"),
    KeyboardButton("–û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å –æ–ø–ª–∞—Ç—É"),
    KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
)
cancel_button = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("–û—Ç–º–µ–Ω–∞"))

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å Excel
def load_data():
    if not os.path.exists(db_file) or os.stat(db_file).st_size == 0:
        return pd.DataFrame(columns=["–§–ò–û", "–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ", "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏", "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û–ø–ª–∞—á–µ–Ω–æ", "–°—É–º–º–∞", "Telegram Username", "Telegram ID"])
    return pd.read_excel(db_file, engine="openpyxl")

def save_data(df):
    df.to_excel(db_file, index=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def create_user_buttons(users, page=0, per_page=5):
    markup = InlineKeyboardMarkup(row_width=1)
    start = page * per_page
    end = start + per_page
    for user in users[start:end]:
        markup.add(InlineKeyboardButton(user, callback_data=f"confirm_{user}"))
    if start > 0:
        markup.add(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_{page-1}"))
    if end < len(users):
        markup.add(InlineKeyboardButton("‚û°Ô∏è –í–ø–µ—Ä–µ–¥", callback_data=f"page_{page+1}"))
    return markup

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.from_user.id in ADMIN_IDS:
        await message.answer("–ü—Ä–∏–≤–µ—Ç, –ê–¥–º–∏–Ω!", reply_markup=admin_menu)
    else:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç! –ë–ª–∏–∂–∞–π—à–∞—è –≤–µ—á–µ—Ä–∏–Ω–∫–∞ {event_date}. –ë–∏–ª–µ—Ç: {event_price}‚ÇΩ", reply_markup=main_menu)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞
@dp.message_handler(lambda message: message.text == "–ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç")
async def buy_ticket(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç—Ä–∏ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤)")
    await TicketOrder.full_name.set()

@dp.message_handler(state=TicketOrder.full_name)
async def process_full_name(message: types.Message, state: FSMContext):
    full_name = message.text.strip()
    words = full_name.split()
    
    if len(words) != 3 or any(len(word) > 15 for word in words):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.")
        return
    
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è")
    await TicketOrder.university.set()

@dp.message_handler(state=TicketOrder.university)
async def process_university(message: types.Message, state: FSMContext):
    if len(message.text) > 25:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    await state.update_data(university=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'.")
    await TicketOrder.promo_code.set()


@dp.message_handler(state=TicketOrder.promo_code)
async def process_promo_code(message: types.Message, state: FSMContext):
    promo_code = message.text.strip().upper()
    data = await state.get_data()
    full_name = data['full_name']
    university = data['university']
    timestamp = datetime.datetime.now().isoformat()

    discount = promo_codes.get(promo_code, 0)
    final_price = event_price - discount

    await state.update_data(promo_code=promo_code, final_price=final_price, discount=discount, timestamp=timestamp)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await message.answer(
        "üîç **–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:**\n\n"
        f"üë§ **–§–ò–û:** {full_name}\n"
        f"üè´ **–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:** {university}\n"
        f"üéü **–ü—Ä–æ–º–æ–∫–æ–¥:** {promo_code}\n"
        f"üí∞ **–°–∫–∏–¥–∫–∞:** {discount}‚ÇΩ\n"
        f"ü§ë **–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:** {final_price}‚ÇΩ\n\n"
        "‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞", callback_data="confirm_yes"),
            InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="confirm_no")
        )
    )
    await TicketOrder.confirm.set()

@dp.callback_query_handler(lambda c: c.data == 'confirm_yes', state=TicketOrder.confirm)
async def confirm_data(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∫—É–ø–∞—è –±–∏–ª–µ—Ç, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–î–∞", callback_data="age_confirm_yes"),
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="age_confirm_no")
        )
    )
    await TicketOrder.age_confirmation.set()

@dp.callback_query_handler(lambda c: c.data == 'age_confirm_yes', state=TicketOrder.age_confirmation)
async def age_confirm_yes(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    full_name = data['full_name']
    university = data['university']
    promo_code = data['promo_code']
    final_price = data['final_price']
    timestamp = data['timestamp']

    df = load_data()
    new_row = pd.DataFrame([{
        "–§–ò–û": full_name,
        "–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ": university,
        "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": timestamp,
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ": "–û–∂–∏–¥–∞–Ω–∏–µ",
        "–û–ø–ª–∞—á–µ–Ω–æ": "–ù–µ—Ç",
        "–°—É–º–º–∞": final_price,
        "Telegram Username": f"@{callback_query.from_user.username}" if callback_query.from_user.username else "N/A",
        "Telegram ID": callback_query.from_user.id
    }])
    df = pd.concat([df, new_row], ignore_index=True)
    save_data(df)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —á–∞—Ç
    total_tickets_sold = len(df[df["–û–ø–ª–∞—á–µ–Ω–æ"] == "–î–∞"])
    total_earned = df[df["–û–ø–ª–∞—á–µ–Ω–æ"] == "–î–∞"]["–°—É–º–º–∞"].sum()
    await bot.send_message(
        NOTIFICATION_CHAT_ID,
        f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑: {full_name} ({university}). –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã. –ü—Ä–æ–º–æ–∫–æ–¥: {promo_code}, –°–∫–∏–¥–∫–∞: {data['discount']}‚ÇΩ, –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price}‚ÇΩ.\n"
        f"–í—Å–µ–≥–æ –ø—Ä–æ–¥–∞–Ω–æ –±–∏–ª–µ—Ç–æ–≤: {total_tickets_sold}\n"
        f"–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞: {total_earned}‚ÇΩ"
    )
    await bot.send_document(NOTIFICATION_CHAT_ID, types.InputFile(db_file))

    await bot.send_message(callback_query.from_user.id, f"–ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ {final_price}‚ÇΩ –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã: 1234567890. –ü–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω—É.")
    await state.finish()

@dp.callback_query_handler(lambda c: c.data == 'age_confirm_no', state=TicketOrder.age_confirmation)
async def age_confirm_no(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu)

@dp.callback_query_handler(lambda c: c.data == 'confirm_no', state=TicketOrder.confirm)
async def change_data(callback_query: types.CallbackQuery):
    await bot.send_message(
        callback_query.from_user.id,
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup().add(
            InlineKeyboardButton("–§–ò–û", callback_data="change_full_name"),
            InlineKeyboardButton("–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ", callback_data="change_university"),
            InlineKeyboardButton("–ü—Ä–æ–º–æ–∫–æ–¥", callback_data="change_promo_code")
        )
    )

@dp.callback_query_handler(lambda c: c.data.startswith('change_'), state=TicketOrder.confirm)
async def process_change_data(callback_query: types.CallbackQuery, state: FSMContext):
    change_field = callback_query.data.split('_')[1]
    if change_field == "full_name":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û (—Ç—Ä–∏ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤)")
        await TicketOrder.full_name.set()
    elif change_field == "university":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è")
        await TicketOrder.university.set()
    elif change_field == "promo_code":
        await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥, –µ—Å–ª–∏ –æ–Ω —É –≤–∞—Å –µ—Å—Ç—å. –ï—Å–ª–∏ –Ω–µ—Ç, –≤–≤–µ–¥–∏—Ç–µ '–Ω–µ—Ç'.")
        await TicketOrder.promo_code.set()
@dp.message_handler(lambda message: message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑" and message.from_user.id in ADMIN_IDS)
async def ask_for_order_confirmation(message: types.Message):
    df = load_data()
    pending_users = df[df["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] == "–û–∂–∏–¥–∞–Ω–∏–µ"]["–§–ò–û"].tolist()
    if not pending_users:
        await message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    markup = create_user_buttons(pending_users)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:", reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('page_'))
async def process_page_callback(callback_query: types.CallbackQuery):
    page = int(callback_query.data.split('_')[1])
    df = load_data()
    pending_users = df[df["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"] == "–û–∂–∏–¥–∞–Ω–∏–µ"]["–§–ò–û"].tolist()
    markup = create_user_buttons(pending_users, page=page)
    await callback_query.message.edit_reply_markup(reply_markup=markup)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('confirm_'))
async def process_confirm_callback(callback_query: types.CallbackQuery):
    full_name = callback_query.data.split('_')[1]
    df = load_data()
    if full_name not in df["–§–ò–û"].values:
        await callback_query.message.answer("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return
    
    df.loc[df["–§–ò–û"] == full_name, ["–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", "–û–ø–ª–∞—á–µ–Ω–æ", "–°—É–º–º–∞"]] = [
        datetime.datetime.now().isoformat(),
        "–î–∞",
        event_price
    ]
    save_data(df)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏
    user_id = df.loc[df["–§–ò–û"] == full_name, "Telegram ID"].values[0]
    try:
        await bot.send_message(user_id, f"{full_name}, {accept_message}")
        await bot.send_location(user_id, latitude=55.775170, longitude=37.669693)
    except ChatNotFound:
        await callback_query.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {full_name}. –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    await callback_query.message.answer(f"–ó–∞–∫–∞–∑ –¥–ª—è {full_name} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.", reply_markup=admin_menu)
    await callback_query.message.delete()

@dp.message_handler(lambda message: message.text == "–û–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å –æ–ø–ª–∞—Ç—É" and message.from_user.id in ADMIN_IDS)
async def ask_for_payment_denial(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∞—Å—Ç–Ω–∏–∫–∞, —á–µ–π –ø–ª–∞—Ç–µ–∂ —Ö–æ—Ç–∏—Ç–µ –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç—å:", reply_markup=cancel_button)
    await AdminSetEvent.deny_payment.set()

@dp.message_handler(state=AdminSetEvent.deny_payment)
async def deny_order_payment(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    full_name = message.text.strip()

    df = load_data()
    if full_name not in df["–§–ò–û"].values:
        await message.answer("–ß–µ–ª–æ–≤–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –§–ò–û –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_button)
        return
    
    df.loc[df["–§–ò–û"] == full_name, ["–û–ø–ª–∞—á–µ–Ω–æ", "–°—É–º–º–∞"]] = [
        "–ù–µ—Ç",
        0
    ]
    save_data(df)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã
    user_id = df.loc[df["–§–ò–û"] == full_name, "Telegram ID"].values[0]
    await bot.send_message(user_id, f"{full_name}, –≤–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç.")

    await message.answer(f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ –¥–ª—è {full_name} –æ–ø—Ä–æ–≤–µ—Ä–≥–Ω—É—Ç–∞.", reply_markup=admin_menu)

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@dp.message_handler(lambda message: message.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ" and message.from_user.id in ADMIN_IDS)
async def change_event(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è (–ø—Ä–∏–º–µ—Ä: 5 –∞–ø—Ä–µ–ª—è)", reply_markup=cancel_button)
    await AdminSetEvent.date.set()

@dp.message_handler(state=AdminSetEvent.date)
async def set_event_date(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    global event_date
    event_date = message.text
    await state.update_data(date=event_date)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –±–∏–ª–µ—Ç–∞", reply_markup=cancel_button)
    await AdminSetEvent.price.set()

@dp.message_handler(state=AdminSetEvent.price)
async def set_event_price(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    global event_price
    event_price = int(message.text)
    await state.finish()
    await message.answer(f"–î–∞—Ç–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è: {event_date}, —Ü–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: {event_price}‚ÇΩ", reply_markup=admin_menu)

# –ü–æ–ª—É—á–µ–Ω–∏–µ Excel —Ç–∞–±–ª–∏—Ü—ã
@dp.message_handler(lambda message: message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É" and message.from_user.id in ADMIN_IDS)
async def get_table(message: types.Message):
    db_file = "tickets.xlsx"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –∏ –Ω–µ –ø—É—Å—Ç –ª–∏ –æ–Ω
    if not os.path.exists(db_file) or os.path.getsize(db_file) == 0:
        await message.answer("–§–∞–π–ª —Å –±–∏–ª–µ—Ç–∞–º–∏ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–ø–∏—Å—å.")
        return

    await message.answer_document(types.InputFile(db_file))

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
@dp.message_handler(lambda message: message.text == "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞" and message.from_user.id in ADMIN_IDS)
async def add_client(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –∫–ª–∏–µ–Ω—Ç–∞ (—Ç—Ä–∏ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤)", reply_markup=cancel_button)
    await AdminAddClient.full_name.set()

@dp.message_handler(state=AdminAddClient.full_name)
async def process_client_full_name(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    full_name = message.text.strip()
    words = full_name.split()
    
    if len(words) != 3 or any(len(word) > 15 for word in words):
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –§–ò–û. –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–∏ —Å–ª–æ–≤–∞, –∫–∞–∂–¥–æ–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 15 —Å–∏–º–≤–æ–ª–æ–≤.", reply_markup=cancel_button)
        return
    
    await state.update_data(full_name=full_name)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞", reply_markup=cancel_button)
    await AdminAddClient.university.set()

@dp.message_handler(state=AdminAddClient.university)
async def process_client_university(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    if len(message.text) > 25:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–µ–±–Ω–æ–≥–æ –∑–∞–≤–µ–¥–µ–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 25 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.", reply_markup=cancel_button)
        return
    
    await state.update_data(university=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫ –≤ Telegram –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, @username)", reply_markup=cancel_button)
    await AdminAddClient.telegram_username.set()

@dp.message_handler(state=AdminAddClient.telegram_username)
async def process_client_telegram_username(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    telegram_username = message.text.strip()
    if telegram_username.startswith('@'):
        telegram_username = telegram_username[1:]
    await state.update_data(telegram_username=telegram_username)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –∫–ª–∏–µ–Ω—Ç –∑–∞–ø–ª–∞—Ç–∏–ª", reply_markup=cancel_button)
    await AdminAddClient.amount_paid.set()

@dp.message_handler(state=AdminAddClient.amount_paid)
async def process_client_amount_paid(message: types.Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∞":
        await state.finish()
        await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=admin_menu)
        return

    amount_paid = message.text.strip()
    data = await state.get_data()
    full_name = data['full_name']
    university = data['university']
    telegram_username = data['telegram_username']
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

    df = load_data()
    new_row = pd.DataFrame([{
        "–§–ò–û": full_name,
        "–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ": university,
        "–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏": timestamp,
        "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ": "–î–∞",
        "–û–ø–ª–∞—á–µ–Ω–æ": "–î–∞",

        "–°—É–º–º–∞": amount_paid,
        "Telegram Username": f"@{telegram_username}",
        "Telegram ID": message.from_user.id
    }])
    df = pd.concat([df, new_row], ignore_index=True)
    save_data(df)

    await message.answer(f"–ö–ª–∏–µ–Ω—Ç {full_name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.", reply_markup=admin_menu)
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=True)